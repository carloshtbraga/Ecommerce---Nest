generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enums do usuário
enum UserStatus {
  Created                  @map("created")
  PendingEmailConfirmation @map("pending-email-confirmation")
  PendingPhoneConfirmation @map("pending-phone-confirmation")
  Activated                @map("activated")
  Deactivated              @map("deactivated")
  Blocked                  @map("blocked")
}

enum UserType {
  Individual  @map("individual")
  LegalEntity @map("legal_entity")
}

enum ApprovalStatus {
  Pending  @map("pending")
  Approved @map("approved")
  Rejected @map("rejected")
}

// Enums de pagamento e pedido
enum PaymentStatus {
  Pending    @map("pending")
  Completed  @map("completed")
  Refunded   @map("refunded")
  Failed     @map("failed")
}

enum OrderStatus {
  Pending    @map("pending")
  Processing @map("processing")
  Shipped    @map("shipped")
  Delivered  @map("delivered")
  Canceled   @map("canceled")
  Returned   @map("returned")
}

enum PaymentMethod {
  CreditCard @map("credit_card")
  DebitCard  @map("debit_card")
  Pix        @map("pix")
  Boleto     @map("boleto")
  PayPal     @map("paypal")
  Stripe     @map("stripe")
}

// USER e tabelas de verificação/reset de senha
model User {
  id                         Int            @id @default(autoincrement()) @map("user_id")
  slug                       String         @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                       String?
  password                   String
  type                       UserType?
  email                      String         @unique
  status                     UserStatus     @default(Created)
  phone                      String?
  approvalStatus             ApprovalStatus @default(Pending)
  approvedById               Int?           @map("approved_by")
  rejectedById               Int?           @map("rejected_by")
  rejectedReason             String?
  createdAt                  DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  pendingEmailConfirmationAt DateTime?      @map("pending_email_confirmation_at") @db.Timestamptz(6)
  emailConfirmedAt           DateTime?      @map("email_confirmed_at") @db.Timestamptz(6)

  EmailVerifications EmailVerification[]
  PasswordResets      PasswordReset[]

  addresses Address[]
  carts     Cart[]
  orders    Order[]
  payments  Payment[]

  userRoles UserRole[]
  
  @@map("user")
}

model EmailVerification {
  id         Int       @id @default(autoincrement()) @map("email_verification_id")
  token      String    @unique @map("token")
  expiresAt  DateTime  @map("expires_at") @db.Timestamptz(6)
  verifiedAt DateTime? @map("verified_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("email_verification")
}

model PasswordReset {
  id        Int       @id @default(autoincrement()) @map("password_reset_id")
  token     String    @unique @map("token")
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  usedAt    DateTime? @map("used_at") @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("password_reset")
}

// Roles
enum RoleType {
  Administrator @map("administrator")
  Customer      @map("customer")
}

model Role {
  id        Int        @id @default(autoincrement()) @map("role_id")
  name      RoleType   @unique
  slug      String     @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userRoles UserRole[]

  @@map("role")
}

model UserRole {
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@index([roleId])
  @@map("user_role")
}

// E-commerce
model Address {
  id              Int       @id @default(autoincrement()) @map("address_id")
  slug            String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          Int       @map("user_id")
  street          String
  number          String
  complement      String?
  district        String
  city            String
  state           String
  country         String
  zipCode         String     @map("zip_code")
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  user            User       @relation(fields: [userId], references: [id])

  // Relações invertidas para billingAddress e shippingAddress
  billingOrders   Order[]    @relation("OrderBillingAddress")
  shippingOrders  Order[]    @relation("OrderShippingAddress")

  @@index([userId])
  @@map("address")
}


model Category {
  id        Int      @id @default(autoincrement()) @map("category_id")
  name      String
  slug      String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  products Product[]

  @@map("category")
}

model Brand {
  id        Int      @id @default(autoincrement()) @map("brand_id")
  name      String
  slug      String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  products Product[]

  @@map("brand")
}

model Product {
  id          Int              @id @default(autoincrement()) @map("product_id")
  name        String
  slug        String            @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?
  price       Decimal           @db.Decimal(10,2)
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  categoryId  Int               @map("category_id")
  brandId     Int?              @map("brand_id")

  category    Category          @relation(fields: [categoryId], references: [id])
  brand       Brand?            @relation(fields: [brandId], references: [id])
  variants    ProductVariant[]
  coupons     Coupon[]          @relation("ProductCoupons")

  @@index([categoryId])
  @@index([brandId])
  @@map("product")
}

model ProductVariant {
  id          Int       @id @default(autoincrement()) @map("product_variant_id")
  slug        String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sku         String    @unique
  price       Decimal   @db.Decimal(10,2)
  productId   Int       @map("product_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  product     Product              @relation(fields: [productId], references: [id])


  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@index([productId])
  @@map("product_variant")
}

model Cart {
  id        Int      @id @default(autoincrement()) @map("cart_id")
  slug      String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId])
  @@map("cart")
}

model CartItem {
  cartId           Int @map("cart_id")
  productVariantId Int @map("product_variant_id")
  quantity         Int

  cart           Cart           @relation(fields: [cartId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@id([cartId, productVariantId])
  @@index([productVariantId])
  @@map("cart_item")
}

model Order {
  id                Int          @id @default(autoincrement()) @map("order_id")
  slug              String       @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            Int          @map("user_id")
  status            OrderStatus  @default(Pending)
  totalAmount       Decimal      @db.Decimal(10,2) @map("total_amount")
  createdAt         DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  billingAddressId  Int?         @map("billing_address_id")
  shippingAddressId Int?         @map("shipping_address_id")

  user             User       @relation(fields: [userId], references: [id])
  items            OrderItem[]
  payment          Payment?
  shipment         Shipment?

  billingAddress  Address? @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress Address? @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])

  @@index([userId])
  @@index([billingAddressId])
  @@index([shippingAddressId])
  @@map("order")
}

model OrderItem {
  orderId          Int     @map("order_id")
  productVariantId Int     @map("product_variant_id")
  quantity         Int
  price            Decimal @db.Decimal(10,2)

  order          Order          @relation(fields: [orderId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@id([orderId, productVariantId])
  @@index([productVariantId])
  @@map("order_item")
}

model Payment {
  id           Int           @id @default(autoincrement()) @map("payment_id")
  slug         String        @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderId      Int           @unique @map("order_id")
  userId       Int           @map("user_id")
  method       PaymentMethod @map("method")
  status       PaymentStatus @default(Pending)
  amount       Decimal       @db.Decimal(10,2)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("payment")
}

model ShippingMethod {
  id         Int      @id @default(autoincrement()) @map("shipping_method_id")
  name       String
  slug       String   @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  price      Decimal  @db.Decimal(10,2)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  shipments Shipment[]

  @@map("shipping_method")
}

model Shipment {
  id               Int            @id @default(autoincrement()) @map("shipment_id")
  slug             String         @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderId          Int            @unique @map("order_id")
  shippingMethodId Int            @map("shipping_method_id")
  trackingCode     String?
  shippedAt        DateTime?      @map("shipped_at") @db.Timestamptz(6)
  deliveredAt      DateTime?      @map("delivered_at") @db.Timestamptz(6)
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  order          Order          @relation(fields: [orderId], references: [id])
  shippingMethod ShippingMethod @relation(fields: [shippingMethodId], references: [id])

  @@index([shippingMethodId])
  @@map("shipment")
}

model Coupon {
  id        Int       @id @default(autoincrement()) @map("coupon_id")
  code      String    @unique
  slug      String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  discount  Decimal   @db.Decimal(10,2)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  products Product[] @relation("ProductCoupons") // Remover "references: [id]"

  @@map("coupon")
}
